package frontEnd;

import entities.Bonus;
import entities.Enemy;
import entities.GameEvents;
import entities.Player;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;

import javax.swing.*;
import javax.swing.JOptionPane;

import parser.*;


public class GamePlay extends JFrame{

    private final GraphicBoard gb = new GraphicBoard();
    private StatusPanel sp;

    public GamePlay(String map) throws Exception {
        /*Window parameters*/
        setTitle("DesktopDungeons");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
	setResizable(false);
	setLayout(null);
        loadMap(map);
	sp = new StatusPanel(gb.getPlayer());
	sp.setBounds(300,0,200,300);
	add(sp);

	
	/*Center screen*/
	Toolkit toolkit = getToolkit();
	Dimension size = toolkit.getScreenSize();
	setLocation(size.width/2 - getWidth()/2,
	size.height/2 - getHeight()/2);
	
        gb.draw();
	sp.updateStats();

        gb.addEventHandler(new GameEvents(){
            @Override
            public void onPlayerDeath(Player p){
                Sound.play("./resources/Death03.wav");
                lose();
            }

            @Override
            public void onEnemyDeath(Enemy e){
                if(e.getLevel() == 3){
                    Sound.play("./resources/Death01.wav");
                    win();
                }
                else{
                    Sound.play("./resources/Death02.wav");;
                }
            }

            @Override
            public void onBonusPickUp(Bonus b){
                Sound.play("./resources/Bonus.wav");
            }

            @Override
            public void onEnemyFight(Enemy e){
                Sound.play("./resources/Hit.wav");
            }
        });
	

        /*Handle Input*/
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(final KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_LEFT:
                        gb.movePlayerWest();
                    break;
                    case KeyEvent.VK_RIGHT:
                        gb.movePlayerEast();
                    break;
                    case KeyEvent.VK_UP:
                        gb.movePlayerNorth();
                    break;
                    case KeyEvent.VK_DOWN:
                        gb.movePlayerSouth();
                    break;
                }

                refreshScreen();
            }
        });
    }
    
    private void loadMap(String map) throws Exception{
       // try{
            Parser p = new Parser(map);
            p.checkFile(gb);
      //º  }
       /* catch(IOException e){
            JOptionPane.showMessageDialog(this, "No existe el archivo especificado.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(CellIsNotEmpty e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. Dos objetos se superponen.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
            throw new Exception();
        }*/
        catch(ErrorReadingPlayer e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. No se pudieron leer los datos del jugador.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(ErrorReadingWall e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. No se pudieron leer los datos de una pared.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(FileException e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. No se pudieron leer los datos del jugador.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        
        setSize(gb.gp.getWidth() + 200, gb.gp.getHeight() + 26);
        getContentPane().add(gb.gp);
    }

    private void lose(){
        refreshScreen();
        JOptionPane.showMessageDialog(this, "¡¡¡SONASTE!!!", "Lo siento...", JOptionPane.PLAIN_MESSAGE);
        mainMenu();
    }

    private void win(){
        refreshScreen();
        JOptionPane.showMessageDialog(this, "¡¡¡GANASTE!!!", "Felicidades", JOptionPane.PLAIN_MESSAGE);
        mainMenu();
    }


    private void refreshScreen(){
        gb.draw();
        sp.updateStats();
    }

    @SuppressWarnings("unused")
    public void mainMenu(){
        MenuPrincipal menuPrincipal = new MenuPrincipal();
	dispose();
    }
    
    public static void main(String args[]) throws Exception{
        GamePlay frame = new GamePlay("./boards/La_Guarida.board");
    }
}
