package frontEnd;

import entities.Bonus;
import entities.Enemy;
import entities.GameEvents;
import entities.Player;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;

import javax.swing.*;
import javax.swing.JOptionPane;

import parser.*;


public class GamePlay extends JFrame{

    private final GraphicBoard gb = new GraphicBoard();
    private StatusPanel sp;

    public GamePlay(String map, String player_name){
        /*Window parameters*/
        setTitle("DesktopDungeons");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setVisible(true);
        setResizable(false);
        setLayout(null);

	// Create the menu bar
	JMenuBar menuBar = new JMenuBar();

	// Create a menu
	JMenu menu = new JMenu("Game");
	menuBar.add(menu);

	// Create a menu item
	JMenuItem restart = new JMenuItem("Restart Dungeon");
	JMenuItem gotoMenu = new JMenuItem("Abandon Dungeon");
	JMenuItem save = new JMenuItem("Save game");
	JMenuItem quit = new JMenuItem("Quit");
	gotoMenu.addActionListener(null);
	menu.add(restart);
	menu.add(save);
	menu.add(gotoMenu);
	menu.add(quit);

	// Install the menu bar in the frame
	setJMenuBar(menuBar);


	centerScreen();
	loadMap(map);
        gb.getPlayer().setName(player_name);
	setStatusPanel();
	centerScreen();
        refreshScreen();
	setGameEvents();
	handleInput();

    }
    
    private void loadMap(String map){
        int width_adj = 200;
	int height_adj = 47;
        try{
            Parser p = new Parser(map);
            p.checkFile(gb);
        }
        catch(IOException e){
            JOptionPane.showMessageDialog(this, "No existe el archivo especificado.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(CellIsNotEmpty e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. Dos objetos se superponen.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(ErrorReadingPlayer e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. No se pudieron leer los datos del jugador.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(ErrorReadingWall e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. No se pudieron leer los datos de una pared.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        catch(FileException e){
            JOptionPane.showMessageDialog(this, "Ocurrió un error al cargar el mapa. No se pudieron leer los datos del jugador.", "Error", JOptionPane.ERROR_MESSAGE);
            mainMenu();
        }
        
        setSize(gb.getWidth() + width_adj, gb.getHeight() + height_adj);
        gb.addTo(this);
    }

    private void setGameEvents(){
	gb.addEventHandler(new GameEvents(){
            @Override
            public void onPlayerDeath(Player p){
                Sound.play("./resources/Death03.wav");
                lose();
            }

            @Override
            public void onEnemyDeath(Enemy e){
                sp.showEnemy(null);
                if(e.getLevel() == 3){
                    Sound.play("./resources/Death01.wav");
                    win();
                }
                else{
                    Sound.play("./resources/Death02.wav");;
                }
            }

            @Override
            public void onBonusPickUp(Bonus b){
                Sound.play("./resources/Bonus.wav");
            }

            @Override
            public void onEnemyFight(Enemy e){
                Sound.play("./resources/Hit.wav");
            }

            @Override
            public void onChangeEnemy(Enemy e){
                sp.showEnemy(e);
            }

            @Override
            public void onLevelUp(int new_level){
                Sound.play("./resources/LevelUp.wav");
            }
        });
    }

    private void setStatusPanel(){
	sp = new StatusPanel(gb.getPlayer());
	sp.setBounds(gb.getWidth(),0,200,gb.getHeight());
	add(sp);
    }

    private void centerScreen(){
	Toolkit toolkit = getToolkit();
	Dimension size = toolkit.getScreenSize();
	setLocation(size.width/2 - getWidth()/2,
	size.height/2 - getHeight()/2);
    }

    private void handleInput(){
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(final KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_LEFT:
                        gb.movePlayerWest();
                    break;
                    case KeyEvent.VK_RIGHT:
                        gb.movePlayerEast();
                    break;
                    case KeyEvent.VK_UP:
                        gb.movePlayerNorth();
                    break;
                    case KeyEvent.VK_DOWN:
                        gb.movePlayerSouth();
                    break;
                }

                refreshScreen();
            }
        });
    }

    private void lose(){
        refreshScreen();
        JOptionPane.showMessageDialog(this, "¡¡¡SONASTE!!!", "Lo siento...", JOptionPane.PLAIN_MESSAGE);
        mainMenu();
    }

    private void win(){
        refreshScreen();
        JOptionPane.showMessageDialog(this, "¡¡¡GANASTE!!!", "Felicidades", JOptionPane.PLAIN_MESSAGE);
        mainMenu();
    }


    private void refreshScreen(){
        gb.draw();
        sp.updateStats();
    }

    @SuppressWarnings("unused")
    public void mainMenu(){
        MainMenu menuPrincipal = new MainMenu();
	dispose();
    }
}
