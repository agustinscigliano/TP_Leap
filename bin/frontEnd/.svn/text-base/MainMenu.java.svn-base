package frontEnd;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;




public class MainMenu extends JFrame {

    private String path;
    
    public MainMenu(){
	setTitle("DesktopDungeons");
	setBounds(1, 1, 400, 400);
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	setResizable(false);
	setVisible(true);
	
	
	
	Toolkit toolkit = getToolkit();
	Dimension size = toolkit.getScreenSize();
	setLocation(size.width/2 - getWidth()/2,
	size.height/2 - getHeight()/2);

	JButton nuevo = new JButton("1. Nuevo Juego");
	nuevo.setBounds(100, 80, 200, 25);
	nuevo.setCursor(new Cursor(Cursor.HAND_CURSOR));
	JButton cargar = new JButton("2. Cargar Juego");
	cargar.setBounds(100, 160, 200, 25);
	cargar.setCursor(new Cursor(Cursor.HAND_CURSOR));
	JButton salir = new JButton("3. Salir");
	salir.setBounds(100, 240, 200, 25);
	salir.setCursor(new Cursor(Cursor.HAND_CURSOR));
    
	add(nuevo);
	add(cargar);
	add(salir);
        
	nuevo.addMouseListener(new MouseAdapter(){

		@Override
		public void mouseClicked(MouseEvent e) {
			switch(e.getID()){
			case MouseEvent.MOUSE_CLICKED:
				setVisible(false);
                try {
                    MapSelection selectedMap = new MapSelection("../boards");
                    if(selectedMap.getInput() != null) {
                        NameMenu nameMenu = new NameMenu();
                        if(nameMenu.getName() != null) {
                            path = selectedMap.getPath(selectedMap.getInput());
                            new GamePlay(path, nameMenu.getName(), null);
                        }
                        else {
                            new MainMenu();
                        }

                    }
                    else {
                        new MainMenu();
                    }


                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ocurrio un error al cargar el mapa. " +
                            "No se pudieron leer los datos del jugador.", "Error",
                            JOptionPane.ERROR_MESSAGE);

                }
				dispose();
			}
		}
	});

    cargar.addMouseListener(new MouseAdapter(){
		@Override
		public void mouseClicked(MouseEvent e) {
			switch(e.getID()){
			case MouseEvent.MOUSE_CLICKED:
                try {
                    GameSelection selectedGame = new GameSelection("../save");
                    if(selectedGame.getInput() != null) {
                        path = selectedGame.getPath(selectedGame.getInput());
                        System.out.println("hola");
                        new GamePlay(path, "ASD", null);
                    }
                    else {
                         new MainMenu();
                    }
                    
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null,
                    "Ocurrio un error al cargar la partida guardada.","Error",
                    JOptionPane.ERROR_MESSAGE);
                    
                }
			}
		}
	});
		
	
	salir.addMouseListener(new MouseAdapter(){

		@Override
		public void mouseClicked(MouseEvent e) {
			switch(e.getID()){
			case MouseEvent.MOUSE_CLICKED:
	          System.exit(0);
			}
			
		}
	});
	
	
	
	}
	public static void main(String[] args) throws Exception {
		MainMenu mainMenu = new MainMenu();

	
	}
	
}
